#/usr/bin/git

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Forward-port local commits to the updated upstream head
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

### settings
git config --global user.name "Yen Hoang"
git config --global user.email "office.yhoang@gmail.com"
git config --global color.ui "auto"
git config --global core.editor nano
git config --global core.editor subl
git config --global push.default matching
git config --global push.default simple

### clone repository
git clone https://github.com/yhoang/rdm

### most important git command
# Show the working tree status
git status

### commit and push
git commit -m "text"
git push

### rename or move file
git mv file file2

### show log history
git log
# one log each line and show log number
git log --oneline

### ignore files
echo "[filename]*" >> .gitignore
git add .gitignore

### show differences
git diff [file]
git diff [log num] [file]
git diff HEAD~[num] [file]

### show anything changed in log number
git show [log num]
git show HEAD~[num]

### revert changes 
# if not staged for commit yet
git checkout -- [file]
# if already committed
git checkout [log num] [file]
git checkout HEAD~[num] [file]
## if wrongly checked out totally
git checkout HEAD~[num]
# you can "revert" that step by
git checkout master

### you can look at what stage is github
git fetch (origin master)

### if there was simultaneously work on one file
# there will be error with git pull
# resolve conflict with looking into file
subl [file]
# and choose what to delete
# then add file again
git add [file]
git status
git commit -m "chose A over B"
git push























